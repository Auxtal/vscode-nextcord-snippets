{
    "discord.py Starter Template":{
        "prefix": "!dpstrt",
        "body": [
            "import discord",
            "from discord.ext import commands",
            "",
            "",
            "bot = commands.Bot(command_prefix=\"${1:!}\")",
            "",
            "@bot.command()",
            "async def test(ctx):",
            "    await ctx.send(\"Test\")",
            "",
            "bot.run(\"${2:Token}\")",
            ""
        ],
        "description": "A starter template"
    },
    "discord.py Basic Command Template":{
        "prefix": "!cmd",
        "body": [
            "@${1|bot,client|}.command()",
            "async def ${2:test}(ctx$3):",
            "    await ctx.send(\"$0\")"
        ],
        "description": "A basic command template (Not for cogs)"
    },
    "discord.py Not Shadowing Command Template":{
        "prefix": "!unscmd",
        "body": [
            "@${1|bot,client|}.command(name=\"${2:test}\")",
            "async def _${2:test}(ctx$3):",
            "    await ctx.send(\"$0\")"
        ],
        "description": "A basic command template that doesn't shadow another function (Not for cogs)"
    },
    "discord.py Basic Event Template":{
        "prefix": "!evt",
        "body": [
            "@${1|bot,client|}.event",
            "async def ${2:on_message}($3):",
            "    $0"
        ],
        "description": "A basic event template (Not for cogs)"
    },
    "discord.py Cog Command Template":{
        "prefix": "!cgcmd",
        "body": [
            "@commands.command()",
            "async def ${1:test}(self, ctx$2):",
            "    await ctx.send(\"$0\")"
        ],
        "description": "A basic command template for cogs"
    },
    "discord.py Cog Not Shadowing Command Template":{
        "prefix": "!cgunscmd",
        "body": [
            "@commands.command(name=\"${2:test}\")",
            "async def _${2:test}(self, ctx$3):",
            "    await ctx.send(\"$0\")"
        ],
        "description": "A basic command template that doesn't shadow another function for cogs"
    },
    "discord.py Cog Event Template":{
        "prefix": "!cgevt",
        "body": [
            "@commands.Cog.listener()",
            "async def ${1:on_ready}(self, $2):",
            "    $0"
        ],
        "description": "A basic event template for cogs"
    },
    "discord.py Cog Template": {
        "prefix": "!cog",
        "body": [
            "import discord",
            "from discord.ext import commands",
            "",
            "",
            "class ${1:CogName}(commands.Cog):",
            "    def __init__(self, bot):",
            "        self.bot = bot",
            "",
            "    $0",
            "",
            "def setup(bot):",
            "    bot.add_cog(${1:CogName}(bot))",
            ""
        ],
        "description": "A starter template for a cog"
    },
    "aiohttp Basic Usage Template":{
        "prefix": "!ahtp",
        "body": [
            "async with ${1|bot,client,self.bot,self.client|}.session.get(\"$2\") as r:",
            "    resp = await r.json()",
            "    $0"
        ],
        "description": "You need to have bot.session defined as a instance of aiohttp.ClientSession"
    },
    "discord.py Global Check Template":{
        "prefix": "!gbchk",
        "body": [
            "@${1|bot,client|}.check",
            "async def ${2:bot_check}(ctx):",
            "    $0"
        ],
        "description": "A basic global check template"
    },
    "discord.py Cog Check Template":{
        "prefix": "!cgchk",
        "body": [
            "async def cog_check(self, ctx):",
            "    $0",
            "    if $1:",
            "        return True",
            "    else:",
            "        return False",
        ],
        "description": "A basic cog check template"
    },
    "discord.py Embed Help":{
        "prefix": "!embedhelp",
        "body": [
            "class MyNewHelp(commands.MinimalHelpCommand):",
            "async def send_pages(self):",
            "    destination = self.get_destination()",
            "    for page in self.paginator.pages:",
            "        embed = discord.Embed(description=page)",
            "        await destination.send(embed=embed)"
        ],
        "description": "A custom help command implementation that modifies the default help and uses embed"
    },
    "discord.py Embed Template":{
        "prefix": "!emb",
        "body": [
            "embed = discord.Embed(${1:title=\"$2\",} ${3:description=\"$4\",} ${5:color=$6,} ${7:timestamp=$8,})"
        ],
        "description": "Makes a Embed"
    },
    "discord.py Embed Field Template":{
        "prefix": "!embfield",
        "body": [
            "${1:embed}.add_field(name=\"$2\", value=\"$3\", inline=${4|True,False|})"
        ],
        "description": "Adds a field to a embed"
    },
    "discord.py Embed Footer Template":{
        "prefix": "!embfoot",
        "body": [
            "${1:embed}.set_footer(text=\"$2\", ${3:icon_url=\"${4}\"})"
        ],
        "description": "Adds a footer to a embed"
    },
    "discord.py Embed Author Template":{
        "prefix": "!embauthor",
        "body": [
            "${1:embed}.set_author(name=\"$2\", ${3:url=\"${4}\",} ${5:icon_url=\"${6}\"})"
        ],
        "description": "Adds a author to a embed"
    },
    "discord.py Embed Thumbnail Template":{
        "prefix": "!embthumb",
        "body": [
            "${1:embed}.set_thumbnail(url=\"$2\")"
        ]
    },
    "discord.py Embed Image Template":{
        "prefix": "!embimg",
        "body": [
            "${1:embed}.set_image(url=\"$2\")"
        ]
    }
}
